                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11528 (MINGW32)
                              4 ;--------------------------------------------------------
                              5 	.module C__Users_Thief3_AppData_Local_Temp_lcc43681
                              6 	.optsdcc -mgbz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _next_sprite
                             13 	.globl _scroll_sprite
                             14 	.globl _move_sprite
                             15 	.globl _set_sprite_tile
                             16 	.globl _set_sprite_data
                             17 	.globl _joypad
                             18 	.globl _delay
                             19 	.globl _MainChar
                             20 ;--------------------------------------------------------
                             21 ; special function registers
                             22 ;--------------------------------------------------------
                             23 ;--------------------------------------------------------
                             24 ; ram data
                             25 ;--------------------------------------------------------
                             26 	.area _DATA
   0000                      27 _MainChar::
   0000                      28 	.ds 48
                             29 ;--------------------------------------------------------
                             30 ; absolute external ram data
                             31 ;--------------------------------------------------------
                             32 	.area _DABS (ABS)
                             33 ;--------------------------------------------------------
                             34 ; global & static initialisations
                             35 ;--------------------------------------------------------
                             36 	.area _HOME
                             37 	.area _GSINIT
                             38 	.area _GSFINAL
                             39 	.area _GSINIT
                             40 ;./sprites/char.c:26: unsigned char MainChar[] =
   0000 21r00r00             41 	ld	hl, #_MainChar
   0003 36 00                42 	ld	(hl), #0x00
   0005 21r01r00             43 	ld	hl, #(_MainChar + 0x0001)
   0008 36 00                44 	ld	(hl), #0x00
   000A 21r02r00             45 	ld	hl, #(_MainChar + 0x0002)
   000D 36 7E                46 	ld	(hl), #0x7e
   000F 21r03r00             47 	ld	hl, #(_MainChar + 0x0003)
   0012 36 7E                48 	ld	(hl), #0x7e
   0014 21r04r00             49 	ld	hl, #(_MainChar + 0x0004)
   0017 36 42                50 	ld	(hl), #0x42
   0019 21r05r00             51 	ld	hl, #(_MainChar + 0x0005)
   001C 36 76                52 	ld	(hl), #0x76
   001E 21r06r00             53 	ld	hl, #(_MainChar + 0x0006)
   0021 36 42                54 	ld	(hl), #0x42
   0023 21r07r00             55 	ld	hl, #(_MainChar + 0x0007)
   0026 36 76                56 	ld	(hl), #0x76
   0028 21r08r00             57 	ld	hl, #(_MainChar + 0x0008)
   002B 36 4A                58 	ld	(hl), #0x4a
   002D 21r09r00             59 	ld	hl, #(_MainChar + 0x0009)
   0030 36 4A                60 	ld	(hl), #0x4a
   0032 21r0Ar00             61 	ld	hl, #(_MainChar + 0x000a)
   0035 36 7E                62 	ld	(hl), #0x7e
   0037 21r0Br00             63 	ld	hl, #(_MainChar + 0x000b)
   003A 36 7E                64 	ld	(hl), #0x7e
   003C 21r0Cr00             65 	ld	hl, #(_MainChar + 0x000c)
   003F 36 36                66 	ld	(hl), #0x36
   0041 21r0Dr00             67 	ld	hl, #(_MainChar + 0x000d)
   0044 36 36                68 	ld	(hl), #0x36
   0046 21r0Er00             69 	ld	hl, #(_MainChar + 0x000e)
   0049 36 36                70 	ld	(hl), #0x36
   004B 21r0Fr00             71 	ld	hl, #(_MainChar + 0x000f)
   004E 36 36                72 	ld	(hl), #0x36
   0050 21r10r00             73 	ld	hl, #(_MainChar + 0x0010)
   0053 36 00                74 	ld	(hl), #0x00
   0055 21r11r00             75 	ld	hl, #(_MainChar + 0x0011)
   0058 36 00                76 	ld	(hl), #0x00
   005A 21r12r00             77 	ld	hl, #(_MainChar + 0x0012)
   005D 36 7E                78 	ld	(hl), #0x7e
   005F 21r13r00             79 	ld	hl, #(_MainChar + 0x0013)
   0062 36 7E                80 	ld	(hl), #0x7e
   0064 21r14r00             81 	ld	hl, #(_MainChar + 0x0014)
   0067 36 42                82 	ld	(hl), #0x42
   0069 21r15r00             83 	ld	hl, #(_MainChar + 0x0015)
   006C 36 76                84 	ld	(hl), #0x76
   006E 21r16r00             85 	ld	hl, #(_MainChar + 0x0016)
   0071 36 42                86 	ld	(hl), #0x42
   0073 21r17r00             87 	ld	hl, #(_MainChar + 0x0017)
   0076 36 76                88 	ld	(hl), #0x76
   0078 21r18r00             89 	ld	hl, #(_MainChar + 0x0018)
   007B 36 4A                90 	ld	(hl), #0x4a
   007D 21r19r00             91 	ld	hl, #(_MainChar + 0x0019)
   0080 36 4A                92 	ld	(hl), #0x4a
   0082 21r1Ar00             93 	ld	hl, #(_MainChar + 0x001a)
   0085 36 7E                94 	ld	(hl), #0x7e
   0087 21r1Br00             95 	ld	hl, #(_MainChar + 0x001b)
   008A 36 7E                96 	ld	(hl), #0x7e
   008C 21r1Cr00             97 	ld	hl, #(_MainChar + 0x001c)
   008F 36 36                98 	ld	(hl), #0x36
   0091 21r1Dr00             99 	ld	hl, #(_MainChar + 0x001d)
   0094 36 36               100 	ld	(hl), #0x36
   0096 21r1Er00            101 	ld	hl, #(_MainChar + 0x001e)
   0099 36 30               102 	ld	(hl), #0x30
   009B 21r1Fr00            103 	ld	hl, #(_MainChar + 0x001f)
   009E 36 30               104 	ld	(hl), #0x30
   00A0 21r20r00            105 	ld	hl, #(_MainChar + 0x0020)
   00A3 36 00               106 	ld	(hl), #0x00
   00A5 21r21r00            107 	ld	hl, #(_MainChar + 0x0021)
   00A8 36 00               108 	ld	(hl), #0x00
   00AA 21r22r00            109 	ld	hl, #(_MainChar + 0x0022)
   00AD 36 7E               110 	ld	(hl), #0x7e
   00AF 21r23r00            111 	ld	hl, #(_MainChar + 0x0023)
   00B2 36 7E               112 	ld	(hl), #0x7e
   00B4 21r24r00            113 	ld	hl, #(_MainChar + 0x0024)
   00B7 36 42               114 	ld	(hl), #0x42
   00B9 21r25r00            115 	ld	hl, #(_MainChar + 0x0025)
   00BC 36 76               116 	ld	(hl), #0x76
   00BE 21r26r00            117 	ld	hl, #(_MainChar + 0x0026)
   00C1 36 42               118 	ld	(hl), #0x42
   00C3 21r27r00            119 	ld	hl, #(_MainChar + 0x0027)
   00C6 36 76               120 	ld	(hl), #0x76
   00C8 21r28r00            121 	ld	hl, #(_MainChar + 0x0028)
   00CB 36 4A               122 	ld	(hl), #0x4a
   00CD 21r29r00            123 	ld	hl, #(_MainChar + 0x0029)
   00D0 36 4A               124 	ld	(hl), #0x4a
   00D2 21r2Ar00            125 	ld	hl, #(_MainChar + 0x002a)
   00D5 36 7E               126 	ld	(hl), #0x7e
   00D7 21r2Br00            127 	ld	hl, #(_MainChar + 0x002b)
   00DA 36 7E               128 	ld	(hl), #0x7e
   00DC 21r2Cr00            129 	ld	hl, #(_MainChar + 0x002c)
   00DF 36 36               130 	ld	(hl), #0x36
   00E1 21r2Dr00            131 	ld	hl, #(_MainChar + 0x002d)
   00E4 36 36               132 	ld	(hl), #0x36
   00E6 21r2Er00            133 	ld	hl, #(_MainChar + 0x002e)
   00E9 36 06               134 	ld	(hl), #0x06
   00EB 21r2Fr00            135 	ld	hl, #(_MainChar + 0x002f)
   00EE 36 06               136 	ld	(hl), #0x06
                            137 ;--------------------------------------------------------
                            138 ; Home
                            139 ;--------------------------------------------------------
                            140 	.area _HOME
                            141 	.area _HOME
                            142 ;--------------------------------------------------------
                            143 ; code
                            144 ;--------------------------------------------------------
                            145 	.area _CODE
                            146 ;main.c:6: void next_sprite(UINT8 sprite_index, UINT8* current_sprite_index){
                            147 ;	---------------------------------
                            148 ; Function next_sprite
                            149 ; ---------------------------------
   0000                     150 _next_sprite::
                            151 ;main.c:7: ++(*current_sprite_index);
   0000 F8 03               152 	ldhl	sp,#(4 - 1)
   0002 4E                  153 	ld	c, (hl)
   0003 23                  154 	inc	hl
   0004 46                  155 	ld	b, (hl)
   0005 0A                  156 	ld	a, (bc)
   0006 3C                  157 	inc	a
   0007 02                  158 	ld	(bc), a
                            159 ;main.c:8: if(*current_sprite_index == 3){
   0008 D6 03               160 	sub	a, #0x03
   000A 20 02               161 	jr	NZ,00102$
                            162 ;main.c:9: *current_sprite_index = 0;
   000C AF                  163 	xor	a, a
   000D 02                  164 	ld	(bc), a
   000E                     165 00102$:
                            166 ;main.c:12: set_sprite_tile(sprite_index, *current_sprite_index);
   000E 0A                  167 	ld	a, (bc)
   000F F5                  168 	push	af
   0010 33                  169 	inc	sp
   0011 F8 03               170 	ldhl	sp,	#3
   0013 7E                  171 	ld	a, (hl)
   0014 F5                  172 	push	af
   0015 33                  173 	inc	sp
   0016 CDr00r00            174 	call	_set_sprite_tile
   0019 E8 02               175 	add	sp, #2
                            176 ;main.c:13: }
   001B C9                  177 	ret
                            178 ;main.c:15: void main()
                            179 ;	---------------------------------
                            180 ; Function main
                            181 ; ---------------------------------
   001C                     182 _main::
   001C 3B                  183 	dec	sp
                            184 ;main.c:17: UINT8 current_sprite_index = 0;
   001D AF                  185 	xor	a, a
   001E F8 00               186 	ldhl	sp,	#0
   0020 77                  187 	ld	(hl), a
                            188 ;main.c:19: set_sprite_data(main_char, 3, MainChar);
   0021 21r00r00            189 	ld	hl, #_MainChar
   0024 E5                  190 	push	hl
   0025 3E 03               191 	ld	a, #0x03
   0027 F5                  192 	push	af
   0028 33                  193 	inc	sp
   0029 AF                  194 	xor	a, a
   002A F5                  195 	push	af
   002B 33                  196 	inc	sp
   002C CDr00r00            197 	call	_set_sprite_data
   002F E8 04               198 	add	sp, #4
                            199 ;main.c:20: set_sprite_tile(main_char, 0);
   0031 AF                  200 	xor	a, a
   0032 F5                  201 	push	af
   0033 33                  202 	inc	sp
   0034 AF                  203 	xor	a, a
   0035 F5                  204 	push	af
   0036 33                  205 	inc	sp
   0037 CDr00r00            206 	call	_set_sprite_tile
   003A E8 02               207 	add	sp, #2
                            208 ;main.c:21: move_sprite(main_char, 88, 78);
   003C 3E 4E               209 	ld	a, #0x4e
   003E F5                  210 	push	af
   003F 33                  211 	inc	sp
   0040 3E 58               212 	ld	a, #0x58
   0042 F5                  213 	push	af
   0043 33                  214 	inc	sp
   0044 AF                  215 	xor	a, a
   0045 F5                  216 	push	af
   0046 33                  217 	inc	sp
   0047 CDr00r00            218 	call	_move_sprite
   004A E8 03               219 	add	sp, #3
                            220 ;main.c:22: SHOW_SPRITES;
   004C F0r00               221 	ldh	a, (_LCDC_REG+0)
   004E F6 02               222 	or	a, #0x02
   0050 E0r00               223 	ldh	(_LCDC_REG+0),a
                            224 ;main.c:25: while(1){
   0052                     225 00107$:
                            226 ;main.c:26: switch(joypad()){
   0052 CDr00r00            227 	call	_joypad
   0055 7B                  228 	ld	a, e
   0056 FE 01               229 	cp	a, #0x01
   0058 CAr93r00            230 	jp	Z,00102$
   005B FE 02               231 	cp	a, #0x02
   005D 28 0C               232 	jr	Z,00101$
   005F FE 04               233 	cp	a, #0x04
   0061 CArBBr00            234 	jp	Z,00103$
   0064 D6 08               235 	sub	a, #0x08
   0066 CArE3r00            236 	jp	Z,00104$
   0069 18 E7               237 	jr	00107$
                            238 ;main.c:27: case J_LEFT:
   006B                     239 00101$:
                            240 ;main.c:28: scroll_sprite(main_char, -10, 0);
   006B AF                  241 	xor	a, a
   006C F5                  242 	push	af
   006D 33                  243 	inc	sp
   006E 3E F6               244 	ld	a, #0xf6
   0070 F5                  245 	push	af
   0071 33                  246 	inc	sp
   0072 AF                  247 	xor	a, a
   0073 F5                  248 	push	af
   0074 33                  249 	inc	sp
   0075 CDr00r00            250 	call	_scroll_sprite
   0078 E8 03               251 	add	sp, #3
                            252 ;main.c:29: next_sprite(main_char, &current_sprite_index);
   007A F8 00               253 	ldhl	sp,	#0
   007C 4D                  254 	ld	c, l
   007D 44                  255 	ld	b, h
   007E C5                  256 	push	bc
   007F AF                  257 	xor	a, a
   0080 F5                  258 	push	af
   0081 33                  259 	inc	sp
   0082 CDr00r00            260 	call	_next_sprite
   0085 E8 03               261 	add	sp, #3
                            262 ;main.c:31: delay(100);
   0087 21 64 00            263 	ld	hl, #0x0064
   008A E5                  264 	push	hl
   008B CDr00r00            265 	call	_delay
   008E E8 02               266 	add	sp, #2
                            267 ;main.c:32: break;
   0090 C3r52r00            268 	jp	00107$
                            269 ;main.c:33: case J_RIGHT:
   0093                     270 00102$:
                            271 ;main.c:34: scroll_sprite(main_char, 10, 0);
   0093 AF                  272 	xor	a, a
   0094 F5                  273 	push	af
   0095 33                  274 	inc	sp
   0096 3E 0A               275 	ld	a, #0x0a
   0098 F5                  276 	push	af
   0099 33                  277 	inc	sp
   009A AF                  278 	xor	a, a
   009B F5                  279 	push	af
   009C 33                  280 	inc	sp
   009D CDr00r00            281 	call	_scroll_sprite
   00A0 E8 03               282 	add	sp, #3
                            283 ;main.c:35: next_sprite(main_char, &current_sprite_index);
   00A2 F8 00               284 	ldhl	sp,	#0
   00A4 4D                  285 	ld	c, l
   00A5 44                  286 	ld	b, h
   00A6 C5                  287 	push	bc
   00A7 AF                  288 	xor	a, a
   00A8 F5                  289 	push	af
   00A9 33                  290 	inc	sp
   00AA CDr00r00            291 	call	_next_sprite
   00AD E8 03               292 	add	sp, #3
                            293 ;main.c:37: delay(100);
   00AF 21 64 00            294 	ld	hl, #0x0064
   00B2 E5                  295 	push	hl
   00B3 CDr00r00            296 	call	_delay
   00B6 E8 02               297 	add	sp, #2
                            298 ;main.c:38: break;
   00B8 C3r52r00            299 	jp	00107$
                            300 ;main.c:39: case J_UP:
   00BB                     301 00103$:
                            302 ;main.c:40: scroll_sprite(main_char, 0, -10);
   00BB 3E F6               303 	ld	a, #0xf6
   00BD F5                  304 	push	af
   00BE 33                  305 	inc	sp
   00BF AF                  306 	xor	a, a
   00C0 F5                  307 	push	af
   00C1 33                  308 	inc	sp
   00C2 AF                  309 	xor	a, a
   00C3 F5                  310 	push	af
   00C4 33                  311 	inc	sp
   00C5 CDr00r00            312 	call	_scroll_sprite
   00C8 E8 03               313 	add	sp, #3
                            314 ;main.c:41: next_sprite(main_char, &current_sprite_index);
   00CA F8 00               315 	ldhl	sp,	#0
   00CC 4D                  316 	ld	c, l
   00CD 44                  317 	ld	b, h
   00CE C5                  318 	push	bc
   00CF AF                  319 	xor	a, a
   00D0 F5                  320 	push	af
   00D1 33                  321 	inc	sp
   00D2 CDr00r00            322 	call	_next_sprite
   00D5 E8 03               323 	add	sp, #3
                            324 ;main.c:43: delay(100);
   00D7 21 64 00            325 	ld	hl, #0x0064
   00DA E5                  326 	push	hl
   00DB CDr00r00            327 	call	_delay
   00DE E8 02               328 	add	sp, #2
                            329 ;main.c:44: break;
   00E0 C3r52r00            330 	jp	00107$
                            331 ;main.c:45: case J_DOWN:
   00E3                     332 00104$:
                            333 ;main.c:46: scroll_sprite(main_char, 0, 10);
   00E3 3E 0A               334 	ld	a, #0x0a
   00E5 F5                  335 	push	af
   00E6 33                  336 	inc	sp
   00E7 AF                  337 	xor	a, a
   00E8 F5                  338 	push	af
   00E9 33                  339 	inc	sp
   00EA AF                  340 	xor	a, a
   00EB F5                  341 	push	af
   00EC 33                  342 	inc	sp
   00ED CDr00r00            343 	call	_scroll_sprite
   00F0 E8 03               344 	add	sp, #3
                            345 ;main.c:47: next_sprite(main_char, &current_sprite_index);
   00F2 F8 00               346 	ldhl	sp,	#0
   00F4 4D                  347 	ld	c, l
   00F5 44                  348 	ld	b, h
   00F6 C5                  349 	push	bc
   00F7 AF                  350 	xor	a, a
   00F8 F5                  351 	push	af
   00F9 33                  352 	inc	sp
   00FA CDr00r00            353 	call	_next_sprite
   00FD E8 03               354 	add	sp, #3
                            355 ;main.c:49: delay(100);
   00FF 21 64 00            356 	ld	hl, #0x0064
   0102 E5                  357 	push	hl
   0103 CDr00r00            358 	call	_delay
   0106 E8 02               359 	add	sp, #2
                            360 ;main.c:51: }
   0108 C3r52r00            361 	jp	00107$
                            362 ;main.c:53: }
   010B 33                  363 	inc	sp
   010C C9                  364 	ret
                            365 	.area _CODE
                            366 	.area _CABS (ABS)
